"use client"

import type React from "react"

import { useState, useRef } from "react"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogClose,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { useToast } from "@/components/ui/use-toast"
import { UploadCloud, Loader2, FileUp } from "lucide-react"

const CATEGORIES = ["Technical Specs", "Pricing Data", "Compliance Docs", "Project Files", "Supplier Info", "Other"]

interface UploadDocumentModalProps {
  onUploadComplete: (newDocument: any) => void // 'any' for mock simplicity
}

export function UploadDocumentModal({ onUploadComplete }: UploadDocumentModalProps) {
  const { toast } = useToast()
  const [isOpen, setIsOpen] = useState(false)
  const [isUploading, setIsUploading] = useState(false)
  const [file, setFile] = useState<File | null>(null)
  const [category, setCategory] = useState("")
  const fileInputRef = useRef<HTMLInputElement>(null)

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files[0]) {
      setFile(event.target.files[0])
    }
  }

  const handleUpload = async () => {
    if (!file || !category) {
      toast({
        title: "Missing Information",
        description: "Please select a file and a category.",
        variant: "destructive",
      })
      return
    }

    setIsUploading(true)
    // Simulate upload process
    await new Promise((resolve) => setTimeout(resolve, 1500))

    const newDocument = {
      id: `kb-mock-${Date.now()}`,
      title: file.name,
      summary: "Newly uploaded document. Summary would be generated by AI.",
      category,
      fileType: file.type.split("/")[1] || "other",
      fileSize: `${(file.size / 1024).toFixed(1)}KB`,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    }

    onUploadComplete(newDocument)
    setIsUploading(false)
    setIsOpen(false)
    setFile(null)
    setCategory("")
    if (fileInputRef.current) fileInputRef.current.value = ""

    toast({
      title: "Upload Successful (Mock)",
      description: `${file.name} has been added to the knowledge base.`,
    })
  }

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        {/* Add id here */}
        <Button id="actualUploadModalTriggerButton" className="bg-accent hover:bg-accent/90 text-accent-foreground">
          <UploadCloud className="mr-2 h-4 w-4" /> Upload Document
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Upload to Knowledge Base</DialogTitle>
          <DialogDescription>
            Add a new document. It will be processed and made available to your AI agents.
          </DialogDescription>
        </DialogHeader>
        <div className="space-y-4 py-4">
          <div className="space-y-1.5">
            <Label htmlFor="file-upload">Document File</Label>
            <Input id="file-upload" type="file" ref={fileInputRef} onChange={handleFileChange} />
            {file && (
              <p className="text-sm text-muted-foreground">
                Selected: {file.name} ({(file.size / 1024).toFixed(1)} KB)
              </p>
            )}
          </div>
          <div className="space-y-1.5">
            <Label htmlFor="category">Category</Label>
            <Select value={category} onValueChange={setCategory}>
              <SelectTrigger id="category">
                <SelectValue placeholder="Select a category..." />
              </SelectTrigger>
              <SelectContent>
                {CATEGORIES.map((cat) => (
                  <SelectItem key={cat} value={cat}>
                    {cat}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
        <DialogFooter>
          <DialogClose asChild>
            <Button variant="outline" disabled={isUploading}>
              Cancel
            </Button>
          </DialogClose>
          <Button onClick={handleUpload} disabled={isUploading || !file || !category}>
            {isUploading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            <FileUp className="mr-2 h-4 w-4" />
            Upload
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}
